From database schema to GraphQL API in one hour.

Summary: This article shows you how to generate an executable GraphQL API from an existing database schema. 
Intended audience: companies who are moving to GraphQL as an alternative to rest and have a large and complex schema to publish.  

BarleyDB is a open source querying and persistence framework for relational databases. Using BarleyDB we can
1) Autogenerate a BarleyDB specification by connecting to a database and reading the database meta-data.
2) Run BarleyDB against the specification, connect to a database and expose a GraphQL endpoint. 

BarleyDB will auto generate 2 queries per table:
1)  query for a single row by the primary key
2)  query for multiple rows use non-primary key columns.

BarleyDB has a query execution engine which allows with advanced features to achieve extremely high performance. More on that here ->

Batch Fetching:
Batch fetching prevents the classic N+1 problem by fetching all N associations in one query using the in(...) SQL clause. 
For example:
 - Given a database with an Order which has 100 items and each item has a delivery and a feedback.
 - Given the order is loaded with it's 100 items
 - Given batch fetching is enabled for the order.
 - When a single delivery is accessed triggering a lazy load.
 - Then BarleyDB will use the SQL in (...) clause to load all 100 delivery records for all items in one go. 

The SQL used to batch fetch the deliveries looks like so:
select * from delivery d where d.id in (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) 


Join Breaking: 
Joining in SQL must be managed with care as each 1:N join has a exponential effect on the resultset size. 
Join Breaking breaks a large query with many joins into multiple smaller queries, thus mitigating the problem. 
The queries on the far side of the join-breaks are then later used by the GraphQL data fetchers to further fetch the data. 
For example:
 - A GraphQL query request is received with 100 nested parts across various depths.
 - A full query with 100 left outer joins is created.
 - The 100 joins are processed by a join breaking algorithm which breaks (in this case) 2 joins.
 - The root query is executed which fetches the first large batch of data.
 - GraphQL finds all loaded data until it reaches one of the join break boundaries.
 --- The GraphQL datafetcher is called to fetch the data which is missing. 
 --- BarkeyDB executes the query on the other side of the given break to fetch the missing data.
 - All data is fetched (3 queries are executed in total).

Give the following query structure
SELECT A
 A JOIN B
 B JOIN C
 A JOIN D
 D JOIN E
 E JOIN F

 If a join break is made at A JOIN D then we have the following 2 queries

SELECT A
 A JOIN B
 B JOIN C

Data for tables A, B and C are fetched in the inital query.

Data for tables D, E and F are fetched soon after by the GraphQL datafetcher.

SELECT D
 D JOIN E
 E JOIN F

If the cardinality of relations are as follows 
 A -> B  = 10x      
 B -> C  = 100x 
 A -> D  = 10x
 D -> E  = 100x
 E -> F  = 10x

Then a single full query for a given 'A' will have return the following number of rows
 full query =  1 * 10 * 100 * 10 * 100 * 10 = 10'000'000 rows

If instead the split queries are used then we have

query for a given 'A' joining to B and C = 1 * 10 * 100 = 1000 rows
query for the 10 'D' rows for the given 'A' joining to E and F = 10 * 100 * 10 = 10'000  rows
total rows = 11'000 rows



The following tables provides a comparison
A    B     C    D    E    F        FULL_QUERY    SPLIT QUERIES    
1    10    100  10   100  10      1'000'000'000     20'000      





Join Breaking is used to reduce the number of rows which the database has to process by reducing the number of cross-products in a given query. There are two aspects to join breaking:
- Reducing the amount of row multiplication reduces the amount of resources required by the database server and by the Java program which consumes the data. 
Add table: 


Join Breaking and Batch Fetching compliment each other, because when the data fetcher is called to fetch data from the other side of a break. Batch Fetching uses the in (...) SQL clause to fetch not just the requested entity but ALL entities which correspond to the position in the  data graph.    

Join Breaking and Batch Fetching operating together create queries which look like so:

;root query
select * from a 
left outer join b on a.b_id = b.id   ;1:1
left outer join c on b.c_id = c.id   ;1:1
left outer join d on c.id = d.c_id   ;1:N

;query after break from table d to table e
select * from e
left outer join f on e.id = f.e_id   ;1:N
left outer join g on e.id = g.e_id   ;1:N
where e.ID in (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,??,?,?,?,?,?,?,?,?)


;query after break from table d to table h
select * from h
left outer join i on h.id = i.e_id   ;1:N
left outer join j on h.id = j.e_id   ;1:N
where h.ID in (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)


BarleyDB ships with a default algorithm for breaking joins called DefaultQueryBreaker which has the following rules.
- Never ever break a 1:1 join as it doesn't multiply the number of rows in the resultset
- Break any 1:N joins which are being specifically broken by force.
- Break any 1:N joins which will cause more row multiplication than is *naturally required by the data.
- Break any 1:N joins which exceed the maximum number of joins allowed in a query.  

*naturally required by the data.
Given the same cardinality as before
 A -> B  = 10x      
 B -> C  = 100x 
 A -> D  = 10x
 D -> E  = 100x
 E -> F  = 10x

So:
Query A -> B  => When A = 1 Then (A -> B) = 10 rows
 =>  A is duplicated 10x

Query B -> C  => When B = 1 Then (B -> C) = 100 rows
 =>  B is duplicated 100x

Query A -> B -> C => When A = 1 Then (A -> B -> C) = 1000 rows 
 => A is duplicated 1000x
    B is duplicated 100x

But there _really are_ 1000 unique C rows to load, so there is no waste in terms of C records.

But Query A -> B -> C, A -> D is a different story

Query A -> B -> C, A -> D => When A = 1 Then (A -> B -> C, A -> D) = 10'000 rows
 => A is duplicated 10000x
    B is duplicated 1000x
    C is duplicated 10x
    D is duplicated 1000x 

D is duplicated 1000x because the cardinality of (A -> D) is 10x and there are already 1000 duplicate As from (A -> B -> C)


In summary, scenarios like the above should be avoided when querying large datasets. BarleyDB's DefaultQueryBreaker detects such scenarios and transparently breaks the query for you. There is even a parameter 'breakBadNestingEvery' which controls how often such breaking is performed.   



--- a (very) few numbers
BarleyDB GraphQL support has been tested against complex real world database schemas.
Comparing the naive Hibernate lazy loading approach (all relations lazy loaded) with GraphQL-BarleyDB

Terms:
HHL - hibernate lazy loading
GQLDBD-1BQ - graphql + barleydb, one big query with everything joined.
GQLDBD-JBBF - graphql + barleydb, with join breaks and batch fetches.

Loading a single entity and lots of deeply nested relations.
HLL            GQL-BDB-1BQ   GQL-BDB-JBBF
10 minutes     1 second      5 seconds

As can be seen the GraphQL + BarleyDB outperforms Hibernate lazy loading by a significant margin.
The cool thing with using GraphQL + BarleyDB is that changing the fetch granularity can be done on the fly. Changing the fetch granularity of a hand-coded Hibernate persistence layer can be 3 month, high-risk rewrite.

-----------------


Features:

 Querying:
 
   Query Class API is created for each model. 
   
   Queries are based on model property names not SQL column names.
 
   Easy/Flexible joining to pull back more data in one jdbc request.
   
   Queries can safely span module boundaries.
    - MI Query Classes can work with MAC query classes to join Syntax  to User.
   
   Lazy loading of data when traversing the model.
   
   Fetch queries can be customized at any time.
   
   Compile time safety from Query classes.
   
   Allows extension of queries with extra clauses (permission constraints).
   
   Query batching can be used to execute multiple queries at once (jdbc multiple result-sets).
     - depends on vendor support, transparent to the client programmer. 
   

 Persisting:
 
   No insert,update or delete statements need to be written.
 
   Full model structures are saved to the database in one transaction.
   
   Primary key generation.
   
   Reordering of inserts, updates and deletes to allow JDBC batching.
   
   Sophisticated optimistic lock handling, works with relations between models.
     - batch loading of records from db to compare  freshness.
     - changes in a model can affect the lock of the owning model, ie. changing a mapping updates the syntax lock.  
     - freshness is also checked on model dependencies, ie freshness of structure when saving a mapping.
     - all records in the transaction have the same lock timestamp   
   
   Insert, update and delete statements include the optimistic lock in the where clause.  
   
   Models which have no changes are filtered out.
    - also means only relevant CRUD permissions are checked.

   Audit logs are automatically generated with the full set of changes.
   
   Access Control is performed on all models which will be inserted, updated, deleted.  
 
   Enhanced error reporting
     - Primary key already exists
     - Optimistic lock mismatch
     - Entity missing
     - Unique constraint violation (todo)
 
 
 
 
 
More details:

Querying:

Modules define own Query classes which can be used to build and execute queries.

		public class QXMLSyntaxModel extends QueryObject<XMLSyntaxModel> {
			public QXMLMapping joinToMappings() {}
			public QXMLMapping existsMapping() {}
			public QProperty<SyntaxType> syntaxType() {}
			public QProperty<String> syntaxName() {}
		}
		
		public class QXMLMapping extends QueryObject<XMLMapping> {
			public QXMLSyntaxModel joinToSubSyntax() {}
			public QXMLSyntaxModel existsSubSyntax() {}
			public QProperty<Long> id() {}
			public QProperty<String> xpath() {}
		}
		
Modules define interfaces for models, no setter for the primary key required.

	public interface SyntaxModel {
		Long getId();
		String getName();
		void setName(String name);
		SyntaxType getSyntaxType();
		void setSyntaxType(SyntaxType syntaxType);
		User getUser();
		void setUser(User user);
	}
	
	public interface XMLMapping {
		Long getId();
		void setSyntaxModel(XMLSyntaxModel syntaxModel);
		XMLSyntaxModel getSyntaxModel();
		void setSubSyntaxModel(XMLSyntaxModel syntaxModel);
		XMLSyntaxModel getSubSyntaxModel();
		void setXpath(String xpath);
		String getXpath();
		void setTarget(String target);
		String getTarget();
	}		
 

The interfaces are implemented by JDK dynamic proxies, the programmer could also specify own implementation for
performance gains and easier debugging.

Queries support joins, or, and, exists conditions etc:

        //create a new syntax query
	    QXMLSyntaxModel qsyntax = new QXMLSyntaxModel();
	    
	    //join to the MAC user
	    qsyntax.joinToUser();
	    
	    //join to the structure and then then structure's fields.
	    qsyntax.joinToStructure().joinToFields();


		//create some query objects for subqueries
		QXMLMapping qmapping = qsyntax.existsMapping();
		QUser quser = qsyntax.existsUser();

		//now filter on syntaxes with name "syntax-xml-1" and some specific mappings and was created by user "Scott"
		qsyntax.where(  
			qsyntax.syntaxName().equal("syntax-xml-1")  )
		.andExists( 
			qmapping.where( qmapping.xpath().equal("sfn11").or(qmapping.xpath().equal("sfn12")) ))
		.andExists( 
			quser.where( quser.userName().equal("Scott") ));	    

		//execute the query 
		QueryResult<XMLSyntaxModel> result = entityContext.performQuery(qsyntax);
		
				
		
		
Queries support lazy loading with configurable fetching queries:
The user can change the fetching queries at any time to always fetch the optimal amount of data. 

		//define a fetching query for syntaxes which automatically pulls in user and mappings 
		QXMLSyntaxModel qsyntax = new QXMLSyntaxModel();
		qsyntax.joinToUser();
		qsyntax.joinToMappings()

        //register the query to be used for fetching
		queryRegistry.register(qsyntax);

		//execute the query to get some data		
		QueryResult<XMLSyntaxModel> result = entityContext.performQuery(qsyntax);
		
		//access the sub-syntax name which will fetch the subsyntax, it's user and it's mappings in one go.
		result.getList(0).getMappings().get(0).getSubSyntax().getName();
		
		
		
		
Can batch multiple queries together (depending on database support).
If not supported, then the queries are sent to the database individually

		//create a query batcher
		QueryBatcher qBatch = new QueryBatcher();
		
		//add some queries and execute them
		qBatch.addQuery(qsyntax, qtemplates);
		entityContext.performQueries(qBatch);
		
		//get the query results
		List<XMLSyntax> syntaxes = qBatch.getResult(0, XMLSyntaxModel.class).getList();
		List<Template> templates = qBatch.getResult(1, Templates.class).getList()
		
		

Persisting:

Example output

===================================================================================
Printing out the new unsaved java model:

XMLSyntax Id   null
XMLSyntax Name Scott's Syntax
XMLSyntax Type ROOT
  User Id   null
  User Name Jimmy
  Structure Id   null
  Structure Name scott's structure
  Mapping Id      null
  Mapping XPath   /root1
  Mapping Target  target1
  Mapping Syntax  null
  Mapping Id      null
  Mapping XPath   /root2
  Mapping Target  target2
  Mapping Syntax  null
    XMLSyntax Id   null
    XMLSyntax Name SubSyntaxModel - ooooh
    XMLSyntax Type SUBSYNTAX
      User Id   null
      User Name Jimmy
      Structure Id   null
      Structure Name scott's structure
      Mapping Id      null
      Mapping XPath   sub1
      Mapping Target  subtarget1
      Mapping Syntax  null
      Mapping Id      null
      Mapping XPath   sub2
      Mapping Target  subtarget2
      Mapping Syntax  null
  Mapping Id      null
  Mapping XPath   /root3
  Mapping Target  target3
  Mapping Syntax  null


Sample output during persist.

Create Group ----------------
Entity [XMLStructure.id=null]
Entity [User.id=null]
Entity [XMLSyntaxModel.id=null]
Entity [XMLMapping.id=null]
Entity [XMLSyntaxModel.id=null]
Entity [XMLMapping.id=null]
Entity [XMLMapping.id=null]
Entity [XMLMapping.id=null]
Entity [XMLMapping.id=null]

Update Group ----------------

Delete Group ----------------

Depends On Group ----------------

===================================================================================

Generating audit logs...
Changes found for Entity [XMLStructure.id=700]
Changes found for Entity [User.id=701]
Changes found for Entity [XMLSyntaxModel.id=702]
Changes found for Entity [XMLMapping.id=703]
Changes found for Entity [XMLSyntaxModel.id=704]
Changes found for Entity [XMLMapping.id=705]
Changes found for Entity [XMLMapping.id=706]
Changes found for Entity [XMLMapping.id=707]
Changes found for Entity [XMLMapping.id=708]

===================================================================================

Optimizing operation order to enable batching...

Create Group ----------------
Entity [XMLStructure.id=700]
Entity [User.id=701]
Entity [XMLSyntaxModel.id=702]
Entity [XMLSyntaxModel.id=704]
Entity [XMLMapping.id=703]
Entity [XMLMapping.id=705]
Entity [XMLMapping.id=706]
Entity [XMLMapping.id=707]
Entity [XMLMapping.id=708]

Update Group ----------------

Delete Group ----------------

Depends On Group ----------------

==================================================================================
Verifying access rights...
VERIFYING CREATE RIGHT FOR Entity [XMLStructure.id=700]
VERIFYING CREATE RIGHT FOR Entity [User.id=701]
VERIFYING CREATE RIGHT FOR Entity [XMLSyntaxModel.id=702]
VERIFYING CREATE RIGHT FOR Entity [XMLSyntaxModel.id=704]
VERIFYING CREATE RIGHT FOR Entity [XMLMapping.id=703]
VERIFYING CREATE RIGHT FOR Entity [XMLMapping.id=705]
VERIFYING CREATE RIGHT FOR Entity [XMLMapping.id=706]
VERIFYING CREATE RIGHT FOR Entity [XMLMapping.id=707]
VERIFYING CREATE RIGHT FOR Entity [XMLMapping.id=708]
==================================================================================
Performing inserts...

Executing insert batch for EntityType [ org.example.etl.model.XMLStructure ] of size 1
1 rows were modified in total
Executing insert batch for EntityType [ org.example.acl.model.User ] of size 1
1 rows were modified in total
Executing insert batch for EntityType [ org.example.etl.model.XMLSyntaxModel ] of size 2
2 rows were modified in total
Executing insert batch for EntityType [ org.example.etl.model.XMLMapping ] of size 5
5 rows were modified in total

==================================================================================
Inserting audit records...
AUDIT SS_XMLSTRUCTURE                ID                             null                           700                           
AUDIT SS_XMLSTRUCTURE                NAME                           null                           scott's structure             
AUDIT SS_XMLSTRUCTURE                MODIFIED_AT                    null                           1406290726992                 
AUDIT MAC_USER                       ID                             null                           701                           
AUDIT MAC_USER                       USER_NAME                      null                           Jimmy                         
AUDIT MAC_USER                       MODIFIED_AT                    null                           1406290726992                 
AUDIT SS_SYNTAX_MODEL                ID                             null                           702                           
AUDIT SS_SYNTAX_MODEL                NAME                           null                           Scott's Syntax                
AUDIT SS_SYNTAX_MODEL                STRUCTURE_ID                   null                           700                           
AUDIT SS_SYNTAX_MODEL                STRUCTURE_TYPE                 null                           1                             
AUDIT SS_SYNTAX_MODEL                SYNTAX_TYPE                    null                           ROOT                          
AUDIT SS_SYNTAX_MODEL                USER_ID                        null                           701                           
AUDIT SS_SYNTAX_MODEL                MODIFIED_AT                    null                           1406290726992                 
AUDIT SS_XML_MAPPING                 ID                             null                           703                           
AUDIT SS_XML_MAPPING                 SYNTAX_MODEL_ID                null                           702                           
AUDIT SS_XML_MAPPING                 TARGET_FIELD_NAME              null                           target1                       
AUDIT SS_XML_MAPPING                 XPATH                          null                           /root1                        
AUDIT SS_SYNTAX_MODEL                ID                             null                           704                           
AUDIT SS_SYNTAX_MODEL                NAME                           null                           SubSyntaxModel - ooooh        
AUDIT SS_SYNTAX_MODEL                STRUCTURE_ID                   null                           700                           
AUDIT SS_SYNTAX_MODEL                STRUCTURE_TYPE                 null                           1                             
AUDIT SS_SYNTAX_MODEL                SYNTAX_TYPE                    null                           SUBSYNTAX                     
AUDIT SS_SYNTAX_MODEL                USER_ID                        null                           701                           
AUDIT SS_SYNTAX_MODEL                MODIFIED_AT                    null                           1406290726992                 
AUDIT SS_XML_MAPPING                 ID                             null                           705                           
AUDIT SS_XML_MAPPING                 SYNTAX_MODEL_ID                null                           704                           
AUDIT SS_XML_MAPPING                 TARGET_FIELD_NAME              null                           subtarget1                    
AUDIT SS_XML_MAPPING                 XPATH                          null                           sub1                          
AUDIT SS_XML_MAPPING                 ID                             null                           706                           
AUDIT SS_XML_MAPPING                 SYNTAX_MODEL_ID                null                           704                           
AUDIT SS_XML_MAPPING                 TARGET_FIELD_NAME              null                           subtarget2                    
AUDIT SS_XML_MAPPING                 XPATH                          null                           sub2                          
AUDIT SS_XML_MAPPING                 ID                             null                           707                           
AUDIT SS_XML_MAPPING                 SUB_SYNTAX_MODEL_ID            null                           704                           
AUDIT SS_XML_MAPPING                 SYNTAX_MODEL_ID                null                           702                           
AUDIT SS_XML_MAPPING                 TARGET_FIELD_NAME              null                           target2                       
AUDIT SS_XML_MAPPING                 XPATH                          null                           /root2                        
AUDIT SS_XML_MAPPING                 ID                             null                           708                           
AUDIT SS_XML_MAPPING                 SYNTAX_MODEL_ID                null                           702                           
AUDIT SS_XML_MAPPING                 TARGET_FIELD_NAME              null                           target3                       
AUDIT SS_XML_MAPPING                 XPATH                          null                           /root3    

==================================================================================
Printing out the saved java model 

XMLSyntax Id   702
XMLSyntax Name Scott's Syntax
XMLSyntax Type ROOT
  User Id   701
  User Name Jimmy
  Structure Id   700
  Structure Name scott's structure
  Mapping Id      703
  Mapping XPath   /root1
  Mapping Target  target1
  Mapping Syntax  702
  Mapping Id      707
  Mapping XPath   /root2
  Mapping Target  target2
  Mapping Syntax  702
    XMLSyntax Id   704
    XMLSyntax Name SubSyntaxModel - ooooh
    XMLSyntax Type SUBSYNTAX
      User Id   701
      User Name Jimmy
      Structure Id   700
      Structure Name scott's structure
      Mapping Id      705
      Mapping XPath   sub1
      Mapping Target  subtarget1
      Mapping Syntax  704
      Mapping Id      706
      Mapping XPath   sub2
      Mapping Target  subtarget2
      Mapping Syntax  704
  Mapping Id      708
  Mapping XPath   /root3
  Mapping Target  target3
  Mapping Syntax  702







Defining the models and relations can be specified in XML or in a Java DSL

	The java and JDBC type and column name is specified for each property.
	1:1, 1:N and N:M relations are supported.
	References, Depends on and Owns relationships are supported:
	
	 - References - persisting an entity with a ref to a  newly created entity will insert that entity.
	 
	 - Depends on - an entity will only be saved if the entities it depends on are fresh (optimistic lock).
	 
	 - Owns - Owned entities are inserted, updated and deleted with their owners.   
	  

    <entity interface="org.example.etl.model.XMLSyntaxModel" table="SS_SYNTAX_MODEL" key="id">
        <node name="id"   		javaType="LONG"   columnName="ID"   		jdbcType="BIGINT"/>
        <node name="name" 		javaType="STRING" columnName="NAME" 		jdbcType="VARCHAR"/>
        <node name="syntaxType" 				  columnName="SYNTAX_TYPE" 	jdbcType="INT">
            <enumType>org.example.etl.model.SyntaxType</enumType>
        </node>
        <node name="structureType" javaType="INTEGER" columnName="STRUCTURE_TYPE" jdbcType="INT">
            <fixedValue xsi:type="xs:int">1</fixedValue>
        </node>
        <node name="user" columnName="USER_ID" jdbcType="BIGINT">
            <interfaceName>org.example.acl.model.User</interfaceName>
        </node>
        <node name="structure" columnName="STRUCTURE_ID" jdbcType="BIGINT">
            <interfaceName>org.example.etl.model.XMLStructure</interfaceName>
            <relationType>DEPENDS</relationType>
        </node>
        <node name="mappings">
            <interfaceName>org.example.etl.model.XMLMapping</interfaceName>
            <foreignNodeName>syntaxModel</foreignNodeName>
            <relationType>OWNS</relationType>
        </node>
        <node name="modifiedAt" javaType="LONG" columnName="MODIFIED_AT" jdbcType="TIMESTAMP">
            <optimisticLock>true</optimisticLock>
        </node>
    </entity>

    <entity interface="org.example.etl.model.XMLMapping" table="SS_XML_MAPPING" key="id">
        <node name="id" 		javaType="LONG" 	columnName="ID" 					jdbcType="BIGINT"/>
        <node name="xpath" 		javaType="STRING" 	columnName="XPATH" 					jdbcType="VARCHAR"/>
        <node name="target" 	javaType="STRING" 	columnName="TARGET_FIELD_NAME" 		jdbcType="VARCHAR"/>
        <node name="syntaxModel" 					columnName="SYNTAX_MODEL_ID" 		jdbcType="BIGINT">
            <interfaceName>org.example.etl.model.XMLSyntaxModel</interfaceName>
        </node>
        <node name="subSyntaxModel" 				columnName="SUB_SYNTAX_MODEL_ID"	jdbcType="BIGINT">
            <interfaceName>org.example.etl.model.XMLSyntaxModel</interfaceName>
            <relationType>OWNS</relationType>
        </node>
    </entity>










		