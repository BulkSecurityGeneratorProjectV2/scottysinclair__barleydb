package scott.sort.test;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Arrays;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import org.junit.Test;

import com.smartstream.mac.MacSpec;
import com.smartstream.mi.MiSpec;
import com.smartstream.mi.types.StructureType;
import com.smartstream.mi.types.SyntaxType;

import scott.sort.api.specification.DefinitionsSpec;
import scott.sort.api.specification.SpecRegistry;
import scott.sort.build.specification.ddlgen.GenerateDatabaseScript;
import scott.sort.build.specification.staticspec.processor.StaticDefinitionProcessor;

/**
 * Tests generating an XML specification from a static definition
 * @author scott
 *
 */
public class TestGenerator {

    @Test
    public void testGenerateMacXmlSpec() throws Exception {
        SpecRegistry registry = new SpecRegistry();
        StaticDefinitionProcessor processor = new StaticDefinitionProcessor();
        @SuppressWarnings("unused")
        DefinitionsSpec macSpec = processor.process(new MacSpec(), registry);

        JAXBContext jc = JAXBContext.newInstance(SpecRegistry.class, StructureType.class, SyntaxType.class, MiSpec.class);
        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.marshal(registry, System.out);

        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        marshaller.marshal(registry, bout);
        byte[] data1 = bout.toByteArray();

        Unmarshaller um = jc.createUnmarshaller();
        registry = (SpecRegistry)um.unmarshal(new ByteArrayInputStream(data1));

        bout = new ByteArrayOutputStream();
        marshaller.marshal(registry, bout);
        byte[] data2 = bout.toByteArray();
        assertTrue(Arrays.equals(data1, data2));


        FileOutputStream fout = new FileOutputStream(new File("src/test/java/com/smartstream/mac/macspec.xml"));
        marshaller.marshal(registry, fout);
        fout.flush();
        fout.close();
    }

    @Test
    public void testGenerateMiXmlSpec() throws Exception {
        SpecRegistry registry = new SpecRegistry();
        StaticDefinitionProcessor processor = new StaticDefinitionProcessor();
        @SuppressWarnings("unused")
        DefinitionsSpec miSpec = processor.process(new MiSpec(), registry);

        JAXBContext jc = JAXBContext.newInstance(SpecRegistry.class, StructureType.class, SyntaxType.class, MiSpec.class);
        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        marshaller.marshal(registry, bout);
        byte[] data1 = bout.toByteArray();

        Unmarshaller um = jc.createUnmarshaller();
        registry = (SpecRegistry)um.unmarshal(new ByteArrayInputStream(data1));

        bout = new ByteArrayOutputStream();
        marshaller.marshal(registry, bout);
        byte[] data2 = bout.toByteArray();
        assertTrue(Arrays.equals(data1, data2));

        File file = new File("src/test/java/com/smartstream/mi/mispec.xml");
        FileOutputStream fout = new FileOutputStream(file);
        marshaller.marshal(registry, fout);
        fout.flush();
        fout.close();
    }


    @Test
    public void generateDDLForHsqldb() throws IOException {
        SpecRegistry registry = new SpecRegistry();
        StaticDefinitionProcessor processor = new StaticDefinitionProcessor();

        DefinitionsSpec miSpec = processor.process(new MiSpec(), registry);

        DefinitionsSpec macSpec = registry.getDefinitionsSpec("com.smartstream.mac");

        GenerateDatabaseScript gen = new GenerateDatabaseScript();

        System.out.println(gen.generateScript(macSpec));
        System.out.println();
        System.out.println(gen.generateScript(miSpec));

        try ( Writer out = new FileWriter("src/test/resources/schema.sql"); ) {
            out.write("---\n--- Schema generated by Sort static definitions ---\n---\n---\n");
            out.write(gen.generateScript(macSpec));
            out.write('\n');
            out.write(gen.generateScript(miSpec));
            out.flush();
        }
    }

    @Test
    public void generateCleanScript() throws IOException {
        SpecRegistry registry = new SpecRegistry();
        StaticDefinitionProcessor processor = new StaticDefinitionProcessor();

        DefinitionsSpec miSpec = processor.process(new MiSpec(), registry);

        DefinitionsSpec macSpec = registry.getDefinitionsSpec("com.smartstream.mac");

        GenerateDatabaseScript gen = new GenerateDatabaseScript();

        System.out.println(gen.generateCleanScript(miSpec));
        System.out.println();
        System.out.println(gen.generateCleanScript(macSpec));

        try ( Writer out = new FileWriter("src/test/resources/clean.sql"); ) {
            out.write("---\n--- Clean script generated by Sort static definitions ---\n---\n---\n");
            out.write(gen.generateCleanScript(miSpec));
            out.write('\n');
            out.write(gen.generateCleanScript(macSpec));
            out.flush();
        }
    }

}
